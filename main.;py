import os
import json
import pandas as pd
from langchain.schema import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.schema.output_parser import StrOutputParser
from langchain.schema.runnable import RunnablePassthrough
from langchain_openai import OpenAIEmbeddings
from prompts import sentence_prompt
from utils import get_llm

# 1. Load clinical notes from CSV
def load_clinical_documents(csv_path):
    df = pd.read_csv(csv_path)
    docs = []
    for _, row in df.iterrows():
        title = row.get("title", "")
        text = row.get("text", "")
        if text:
            docs.append(Document(page_content=text, metadata={"title": title}))
    return docs

# 2. Split long documents

def chunk_documents(docs):
    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    return splitter.split_documents(docs)

# 3. Build retriever from chunks
def build_retriever(chunks):
    vectordb = FAISS.from_documents(chunks, OpenAIEmbeddings())
    return vectordb.as_retriever()

# 4. Full sentence RAG pipeline
def run_sentence_extraction(csv_path, output_dir="output/sentences"):
    os.makedirs(output_dir, exist_ok=True)
    docs = load_clinical_documents(csv_path)
    chunks = chunk_documents(docs)
    retriever = build_retriever(chunks)

    rag_chain = (
        {"context": retriever, "question": RunnablePassthrough()}
        | sentence_prompt
        | get_llm()
        | StrOutputParser()
    )

    seen = set()
    for doc in docs:
        title = doc.metadata["title"]
        if title in seen:
            continue
        seen.add(title)

        try:
            result = rag_chain.invoke(f"Extract field-specific clinical sentences from: {title}")
            parsed = json.loads(result)
            parsed["document_title"] = title

            filename = title.replace("/", "_").replace(" ", "_") + ".json"
            with open(os.path.join(output_dir, filename), "w", encoding="utf-8") as f:
                json.dump(parsed, f, indent=2)
            print(f"✅ Saved: {filename}")
        except Exception as e:
            print(f"❌ Failed {title}: {e}")

if __name__ == "__main__":
    run_sentence_extraction("medicaldata.csv")
