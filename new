
üß† Processing batch 40/40...
Traceback (most recent call last):
  File "C:\Users\HariharaM12\PycharmProjects\Task2\main.py", line 240, in <module>
    merged_df["date_of_lab"] = merged_df["date_of_lab"].astype(str).apply(get_oldest_date)
                                                                          ^^^^^^^^^^^^^^^
NameError: name 'get_oldest_date' is not defined




import os
import re
import json
import pandas as pd
import configparser
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor, as_completed
from langchain_core.documents import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_openai import AzureOpenAIEmbeddings, AzureChatOpenAI
from openpyxl import load_workbook
from openpyxl.styles import Alignment

# Load config.ini
config = configparser.ConfigParser()
config.read("config.ini")

# Azure credentials
AZURE_OPENAI_API_KEY = config["azure_openai"]["api_key"]
AZURE_OPENAI_ENDPOINT = config["azure_openai"]["endpoint"]
AZURE_OPENAI_API_VERSION = config["azure_openai"]["api_version"]
EMBEDDING_DEPLOYMENT = config["embedding_models"]["text_embedding_3_large"]
EMBEDDING_MODEL = "text-embedding-3-large"
GPT_DEPLOYMENT = config["gpt_models"]["model_gpt4o"]

# Utilities
def batchify(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def parse_llm_json(raw_text: str) -> str:
    pattern = r"```(?:json)?\s*(.*?)```"
    match = re.search(pattern, raw_text, flags=re.DOTALL)
    raw_text = match.group(1).strip() if match else raw_text.strip()
    if raw_text.startswith("json"):
        raw_text = raw_text[len("json"):].strip()
    try:
        parsed = json.loads(raw_text)
    except json.JSONDecodeError:
        fixed = raw_text.replace("'", '"')
        parsed = json.loads(fixed)
    return json.dumps(parsed)

def normalize_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z0-9]', ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Load dataset
csv_path = "MEDICAL_DATAS.csv"
df = pd.read_csv(csv_path)

# Prepare documents with correct title as metadata
documents = []
for _, row in tqdm(df.iterrows(), total=len(df)):
    if pd.isna(row["text"]):
        continue
    documents.append(Document(page_content=row["text"], metadata={"source": row["title"]}))

# Chunking
splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=250)
chunks = splitter.split_documents(documents)
batches = list(batchify(chunks, 20))

# Embedding model
embedding_model = AzureOpenAIEmbeddings(
    deployment=EMBEDDING_DEPLOYMENT,
    model=EMBEDDING_MODEL,
    openai_api_key=AZURE_OPENAI_API_KEY,
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    openai_api_version=AZURE_OPENAI_API_VERSION,
    chunk_size=1000
)

# Build FAISS index
def build_faiss(batch):
    return FAISS.from_documents(batch, embedding_model)

sub_indexes = []
with ThreadPoolExecutor(max_workers=4) as executor:
    futures = {executor.submit(build_faiss, batch): batch for batch in batches}
    for future in tqdm(as_completed(futures), total=len(futures)):
        try:
            sub_indexes.append(future.result())
        except Exception as e:
            print(f"Batch failed: {e}")

main_index = sub_indexes[0]
for sub_index in sub_indexes[1:]:
    main_index.merge_from(sub_index)
main_index.save_local("faiss_index")

# Vector DB search
vectorstore = FAISS.load_local("faiss_index", embeddings=embedding_model, allow_dangerous_deserialization=True)
query = "Extract the patient's kappa free light chain (mg/L), lambda free light chain (mg/L), and kappa/lambda ratio, along with the lab date and evidence."
results = vectorstore.similarity_search(query, k=1000)

# Filter chunks with matching content and keep original titles
filtered_chunks = []
for doc in results:
    norm_text = normalize_text(doc.page_content)
    source_title = doc.metadata.get("source", "Unknown")
    if source_title != "Unknown" and ('kappa' in norm_text or 'lambda' in norm_text or 'ratio' in norm_text):
        filtered_chunks.append({"title": source_title, "content": doc.page_content})

# Setup LLM
llm = AzureChatOpenAI(
    deployment_name=GPT_DEPLOYMENT,
    model_name="gpt-4o",
    openai_api_key=AZURE_OPENAI_API_KEY,
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    openai_api_version=AZURE_OPENAI_API_VERSION,
    temperature=0
)

# Run LLM on batches
# Run LLM on batches
final_results = []
batches = list(batchify(filtered_chunks, 10))
for i, batch in enumerate(batches):
    json_context = [
        {"note_id": j + 1, "title": item["title"], "content": item["content"]}
        for j, item in enumerate(batch)
    ]
    titles = [item["title"] for item in batch]

    full_prompt = f"""
You are a medical information extraction assistant. Your task is to extract lab results from clinical notes.

Extract the following values only if explicitly stated:
- Kappa free light chains (mg/L)
- Lambda free light chains (mg/L)
- Kappa/Lambda ratio
- Lab test date associated with these values
- Supporting evidence sentences

‚ö†Ô∏è Do not guess or infer values. Only include notes where at least one of the values and the date are clearly stated.

Respond in strict JSON format like below:

[
  {{
    "kappa_flc": "<value with unit>",
    "lambda_flc": "<value with unit>",
    "kappa_lambda_ratio": "<numeric ratio>",
    "date_of_lab": "<YYYY-MM-DD>",
    "evidence_sentences": ["<sentence 1>", "<sentence 2>", ...]
  }}
]

---
üìÑ Context (as JSON input):
{json.dumps(json_context, indent=2)}
"""

    try:
        print(f"\nüß† Processing batch {i + 1}/{len(batches)}...")
        response = llm.invoke(full_prompt)
        cleaned = parse_llm_json(response.content)
        batch_result = json.loads(cleaned)
        for item, title in zip(batch_result, titles):
            item["source_document"] = title
        final_results.extend(batch_result)
    except Exception as e:
        print(f"‚ùå Failed batch {i + 1}: {e}")


# Post-process and save
for row in final_results:
    if isinstance(row.get("evidence_sentences"), list):
        row["evidence_sentences"] = "\n".join(row["evidence_sentences"])
    row["context"] = json.dumps({
    "kappa_flc": row.get("kappa_flc", ""),
    "lambda_flc": row.get("lambda_flc", ""),
    "kappa_lambda_ratio": row.get("kappa_lambda_ratio", ""),
    "date_of_lab": row.get("date_of_lab", ""),
    "evidence_sentences": row.get("evidence_sentences", "")
})

    })

df = pd.DataFrame(final_results)

# Optional: Keep only needed columns
df = df[["source_document", "kappa_flc", "lambda_flc", "kappa_lambda_ratio", "date_of_lab", "evidence_sentences", "context"]]

# ‚úÖ Drop exact duplicates based on key fields
df.drop_duplicates(
    subset=["source_document", "kappa_flc", "lambda_flc", "kappa_lambda_ratio", "date_of_lab", "evidence_sentences"],
    inplace=True
)

# ‚úÖ Now group by source_document and merge multiple values
merged_df = df.groupby("source_document").agg({
    "kappa_flc": lambda x: "; ".join(sorted(set(x.dropna().astype(str)))),
    "lambda_flc": lambda x: "; ".join(sorted(set(x.dropna().astype(str)))),
    "kappa_lambda_ratio": lambda x: "; ".join(sorted(set(x.dropna().astype(str)))),
    "date_of_lab": lambda x: "; ".join(sorted(set(x.dropna().astype(str)))),
    "evidence_sentences": lambda x: "\n".join(sorted(set(x.dropna().astype(str)))),
    "context": lambda x: "\n".join(sorted(set(x.dropna().astype(str))))
}).reset_index()

# === Post-process according to custom logic ===

def filter_mgdl_values(value_str):
    values = value_str.split(";")
    mgdl_values = [v.strip() for v in values if "mg/dL" in v]
    return mgdl_values[0] if mgdl_values else values[0]

def extract_ratio(value_str):
    values = value_str.split(";")
    for v in values:
        if ">" in v or "<" in v:
            return v.strip()
    return values[0].strip() if values else ""

def extract_lab_date_from_text(text):
    """Extract date-like pattern from a string like '2/22/24' or '2024-03-01'"""
    matches = re.findall(r'\b(\d{1,2}/\d{1,2}/\d{2,4}|\d{4}-\d{2}-\d{2})\b', text)
    for date_str in matches:
        try:
            return str(pd.to_datetime(date_str, errors='coerce').date())
        except:
            continue
    return ""

def filter_best_evidence(evidence):
    lines = evidence.split("\n")
    for line in lines:
        lower = line.lower()
        if "mg/dl" in lower and "kappa" in lower and "lambda" in lower and (">" in line or "<" in line):
            return line.strip()
    return lines[0].strip() if lines else ""

# Apply custom logic
merged_df["kappa_flc"] = merged_df["kappa_flc"].astype(str).apply(filter_mgdl_values)
merged_df["lambda_flc"] = merged_df["lambda_flc"].astype(str).apply(filter_mgdl_values)
merged_df["kappa_lambda_ratio"] = merged_df["kappa_lambda_ratio"].astype(str).apply(extract_ratio)
merged_df["date_of_lab"] = merged_df["date_of_lab"].astype(str).apply(get_oldest_date)
merged_df["evidence_sentences"] = merged_df["evidence_sentences"].astype(str).apply(filter_best_evidence)

# Save to Excel
output_dir = r"C:\Users\HariharaM12\PycharmProjects\Task2"
os.makedirs(output_dir, exist_ok=True)
output_path = os.path.join(output_dir, "Chain_Final_Output_Cleaned_Logic.xlsx")
merged_df.to_excel(output_path, index=False)

print(f"\n‚úÖ Final cleaned Excel file saved: {output_path}")
